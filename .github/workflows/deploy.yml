name: Deploy Sentiment Analysis Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  GCP_REGION: us-central1
  SERVICE_NAME: sentiment-analysis-api
  PYTHON_VERSION: '3.10'
  DOCKER_REPO: docker-repository

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r mlops-demo/2-cloud-run-deployment/requirements.txt
        pip install pytest requests
        
    - name: Prepare deployment files
      run: |
        # Create deployment directory
        mkdir -p deployment
        # Copy necessary files recursively
        cp -r mlops-demo/2-cloud-run-deployment/* deployment/
        cp -r mlops-demo/1-model/download_model.py deployment/
        cd deployment
        # Download model
        python download_model.py

    - name: Run model tests
      run: |
        cd mlops-demo/6-cicd
        python test_model.py

    # Authenticate to Google Cloud
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'beta'

    - name: Create Artifact Registry Repository
      run: |
        echo "Creating/verifying Artifact Registry repository..."
        gcloud artifacts repositories describe ${{ env.DOCKER_REPO }} \
          --location=${{ env.GCP_REGION }} \
          || gcloud artifacts repositories create ${{ env.DOCKER_REPO }} \
          --repository-format=docker \
          --location=${{ env.GCP_REGION }} \
          --description="Docker repository for MLOps demo"
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet
        
    - name: Create Cloud Run Service Account
      run: |
        echo "Creating service account for Cloud Run..."
        gcloud iam service-accounts create ${{ env.SERVICE_NAME }} \
          --display-name="Sentiment Analysis Service Account" \
          || echo "Service account may already exist"
        
        # Grant necessary roles
        gcloud projects add-iam-policy-binding ${{ secrets.GCP_PROJECT_ID }} \
          --member="serviceAccount:${{ env.SERVICE_NAME }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/run.invoker"
        
    - name: Build and push Docker container
      run: |
        cd deployment
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.DOCKER_REPO }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --service-account ${{ env.SERVICE_NAME }}@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
          
    - name: Wait for deployment to stabilize
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 60
      
    - name: Run API tests
      env:
        API_URL: ${{ steps.deploy.outputs.url }}
      run: |
        cd mlops-demo/6-cicd
        python test_api.py
        
    - name: Notify on success
      if: success()
      run: |
        echo "Deployment successful!"
        echo "Service URL: ${{ steps.deploy.outputs.url }}" 